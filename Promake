#!/usr/bin/env node

const Promake = require("promake");

const { task, rule, cli, exec } = new Promake();

task(
  "package",
  rule("package.json", "package.yaml", async () => {
    exec("./scripts/merge_package.pl");
  })
).description("update package.json");

const prettier = task("prettier", async (task) => {
  const files = task.args.length
    ? task.args
    : ["src/**/*.js", "src/**/*.svelte"];

  exec("prettier --plugin-search-dir=. -c ", files);
});

const prettier_fix = task("prettier:fix", async (task) => {
  const files = task.args.length
    ? task.args
    : ["src/**/*.js", "src/**/*.svelte"];

  exec("prettier --plugin-search-dir=. --write ", files);
});

const eslint_fix = task("eslint:fix", async (task) => {
  const files = task.args.length ? task.args : ["src"];

  exec("eslint -c package.json --fix " + files.join(" "));
});

const eslint = task("eslint", async (task) => {
  const files = task.args.length ? task.args : ["src"];

  await exec("eslint -c package.json " + files.join(" "));
});

const tests = task("tests", async (task) => {
  await exec("jest src");
});

task("checks", async (task) => {
  for (const subtask of [prettier, eslint]) {
    subtask.args = task.args;
    await subtask.make();
  }
  await tests.make();
});

task("checks:fix", async (task) => {
  for (const subtask of [prettier_fix, eslint_fix]) {
    subtask.args = task.args;
    await subtask.make();
  }
  await tests.make();
});

cli();
